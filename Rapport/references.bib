%Asynchronous Proramming
%article
@InProceedings{PAPER:Callbackhell,
author="Zamora-G{\'o}mez, Edgar
and Garc{\'i}a-L{\'o}pez, Pedro
and Mond{\'e}jar, Rub{\'e}n",
editor="Hunold, Sascha
and Costan, Alexandru
and Gim{\'e}nez, Domingo
and Iosup, Alexandru
and Ricci, Laura
and G{\'o}mez Requena, Mar{\'i}a Engracia
and Scarano, Vittorio
and Varbanescu, Ana Lucia
and Scott, Stephen L.
and Lankes, Stefan
and Weidendorfer, Josef
and Alexander, Michael",
title="Continuation Complexity: A Callback Hell for Distributed Systems",
booktitle="Euro-Par 2015: Parallel Processing Workshops",
year="2015",
publisher="Springer International Publishing",
address="Cham",
pages="286--298",
abstract="Designing and validating large-scale distributed systems is still a complex issue. The asynchronous event-based nature of distributed communications makes these systems complex to implement, debug and test. In this article, we introduce the continuation complexity problem, that arises when synchronous invocations must be converted to asynchronous event code. This problem appears in most Actor libraries where communication is mainly asynchronous, and where a synchronous call to other Actor would block the current Actor, precluding the processing of incoming messages.",
isbn="978-3-319-27308-2"
}

%videos
@ONLINE{VIDEO:AsyncConBack,
author = {Rainer Stropek},
title = {C\# Async Programming - Part 1: Conceptual Background},
year = {2020},
month = {10},
url = {https://www.youtube.com/watch?v=FIZVKteEFyk},
urldate = {2021-01-25},
note = {Youtube Video},
}

@ONLINE{DOC:AsyncAwait,
author = {BillWagner and Varad25 and n1c and mrlife and IEvangelist and Youssef1313 and nschonni and dkreider and pkulikov and Thraka and damabe and kendrahavens and nxtn and DennisLee-DennisLee and mikkelbu and nemrism and mairaw and mikeblome and mjhoffman65 and guardrex and tompratt-AQ},
title = {Asynchronous programming with async and await},
year = {2020},
month = {04},
url = {https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/async/},
urldate = {2021-01-31}
}

@ONLINE{DOC:TaskAsyncProgModel,
author = {BillWagner and DCtheGeek and IEvangelist and TimShererWithAquent and gewarren and Thraka and Youshef1313 and nschonni and pkulikov and nemrism and sguitardude and ryanliang88 and nxtn and mairaw},
title = {Task asynchronous programming model},
year = {2020},
month = {08},
url = {https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/async/task-asynchronous-programming-model},
urldate = {2021-01-31}
}

@ONLINE{DOC:AsyncSocketProg,
author = {karelz and nschonni and kotx and TimShererWithAquent and nemrism and nxtn and mairaw and BillWagner and Shivien and jzeferino and Mikejo5000 and mjhoffman65 and PeterSmithRedmond and guardrex and tompratt-AQ and yishengjin1413},
title = {Asynchronous Server Socket Example},
year = {2017},
month = {03},
url = {https://docs.microsoft.com/en-us/dotnet/framework/network-programming/asynchronous-server-socket-example},
urldate = {2021-06-10}
}

@ONLINE{WEB:AsyncAwaitTut,
author = {AramT},
title = {Your Ultimate async / await Tutorial in C\#},
year = {2018},
url = {https://www.codingame.com/playgrounds/4240/your-ultimate-async-await-tutorial-in-c/},
urldate = {2021-03-09},
note = {NOTE:Tutorial spans 7 webpages, the link will redirect to the introduction page.}
}

%Reactive Programming

%Videos

@ONLINE{VIDEO:dotnetsheffReactive,
author = {dotnetsheff},
title = {The Reactive Extensions for .NET},
year = {2020},
month = {08},
url = {https://youtu.be/6yjl_h7-WYA},
urldate = {2021-01-31},
note = {Youtube Video}
}

@ONLINE{VIDEO:dotnetsocketprog,
author = {Richard Weeks},
title = {C\# Sockets Programming - EP01},
year = {2020},
month = {05},
url = {https://www.youtube.com/watch?v=rrlRydqJbv0},
urldate = {2021-06-10},
note = {Youtube Video}
}

@ONLINE{VIDEO:MicroDev,
author = {Microsoft Developer},
title = {Reactive Extensions for .NET developers},
year = {2018},
month = {11},
url = {https://youtu.be/c9Yq-XE58hA},
urldate = {2021-01-31},
note = {Youtube Video}
}

@ONLINE{WEB:RxProgIntro,
author = {Keval Patel},
title = {What is Reactive Programming?},
year = {2016},
month = {12},
url = {https://medium.com/@kevalpatel2106/what-is-reactive-programming-da37c1611382},
urldate = {2021-03-12}
}

%Documentation sites for RX library

@ONLINE{WEB:ReactiveXMainPage,
author = {ReactiveX},
title = {ReactiveX},
year = {2021},
url = {http://reactivex.io/},
urldate = {2021-03-12}
}

@ONLINE{WEB:ReactiveObservable,
author = {ReactiveX},
title = {Observable},
year = {2021},
url = {http://reactivex.io/documentation/observable.html},
urldate = {2021-03-12}
}

@ONLINE{WEB:ReactiveOperator,
author = {ReactiveX},
title = {Introduction},
year = {2021},
url = {http://reactivex.io/documentation/operators.html},
urldate = {2021-03-16}
}

@ONLINE{WEB:ReactiveSubject,
author = {ReactiveX},
title = {Subject},
year = {2021},
url = {http://reactivex.io/documentation/subject.html},
urldate = {2021-03-12}
}

%Official github for Rx.Net
@ONLINE{Github:ReactiveExtensions,
author = {.NET Foundation},
title = {Reactive Extensions},
year = {2020},
month = {11},
url = {https://github.com/dotnet/reactive},
urldate = {2021-01-31}
}

@Book{BOOK:DotnetMultithreadCookBook,
author = {Eugene Agafonov},
title = {Multithreading in C\# 5.0 Cookbook},
publisher = {Packt Publishing, Limited},
year = {2013},
month = {11},
pages = {190-232}, 
isbn = {978-1-84969-764-4},
url = {https://ebookcentral.proquest.com/lib/uisbib/detail.action?docID=1572912}
}
%199-241 actual, but ignore 9 page intro
@BOOK{BOOK:RxLinq,
series = {Expert's voice in .NET},
abstract = {Pro Reactive Extensions and LINQ is a deep dive into the next important technology for .NET developers: Reactive Extensions. This in-depth tutorial goes beyond what is available anywhere else to teach how to write WPF, Silverlight, and Windows Phone applications using the Reactive Extensions (Rx) to handle events and asynchronous method calls. Reactive programming allows you to turn those aspects of your code that are currently imperative into something much more event-driven and flexible. For this reason, it’s sometimes referred to as LINQ for Events. Reactive programming hinges on the concept of the observable collection, as opposed to the simple enumerable collection with which we’re all familiar. For example, to extract data from a collection and add it to a list box, you would traditionally iterate through the list box, extracting each object in turn. This approach works fine, but it requires significant knowledge about the data you’re working with, which can be limiting. In Rx programming, you're instead informed about each object in turn and then free to react to each notification however you like, which affords much greater flexibility. This book shows you how reactive programming can be applied to a range of situations—from WPF applications to Windows Phone apps—to improve coding efficiency and boost performance.},
publisher = {Apress : Imprint: Apress},
isbn = {1-280-39231-2},
year = {2011},
title = {Programming Reactive Extensions and LINQ},
edition = {1st ed. 2011.},
language = {eng},
address = {Berkeley, CA},
author = {Liberty, Jesse},
keywords = {Microsoft software; Microsoft .NET Framework; Software engineering; Microsoft and .NET; Software Engineering/Programming and Operating Systems},
}

%Book add book after reading it "somewhat"

@ONLINE{WEB:BFTInfo,
author = {Binance.com},
title = {Byzantine Fault Tolerance Explained},
year = {2021},
month = {01},
url = {https://academy.binance.com/en/articles/byzantine-fault-tolerance-explained},
urldate = {2021-03-03}
}

@ONLINE{WEB:ConsesAlgo,
author = {vic},
title = {From Distributed Consensus Algorithms to the Blockchain Consensus Mechanism},
month = {08},
url = {https://www.alibabacloud.com/blog/from-distributed-consensus-algorithms-to-the-blockchain-consensus-mechanism_595315},
urldate = {2021-03-03}
}
%PBFT
%papers
@INPROCEEDINGS{PAPER:DPBFT,  
author={X. {Hao} and L. {Yu} and L. {Zhiqiang} and L. {Zhen} and G. {Dawu}},  
booktitle={2018 IEEE Conference on Communications and Network Security (CNS)},   
title={Dynamic Practical Byzantine Fault Tolerance},   
year={2018},  
volume={},  
number={},  
pages={1-8},  
doi={10.1109/CNS.2018.8433150}
}

@INPROCEEDINGS{PAPER:OGPBFT,
author = {Miguel Castro and Barbara Liskov},
title = {Practical Byzantine Fault Tolerance},
year = {1999},
url = {http://pmg.csail.mit.edu/papers/osdi99.pdf},
pages = {1-14}
}

@INPROCEEDINGS{PAPER:PBFTRecovery,
author = {Miguel Castro and Barbara Liskov},
title =  {Practical Byzantine Fault Tolerance And Proactive Recovery},
booktitle={ACM Transactions on Computer Systems},
year = {2002},
url = {https://doi.org/10.1145/571637.571640},
pages = {399-416}
}

@ONLINE{WEB:SawtoothPBFT,
author = {Bitwise IO, Inc},
title = {PBFT Architecture},
year = {2018},
url = {https://sawtooth.hyperledger.org/docs/pbft/releases/latest/architecture.html#pbft-operation},
urldate = {2021-03-17},
}

%book
@BOOK{BOOK:MVstandver3,
author = {Maarten van Steen and Andrew S. Tanenbaum},
publisher = {Maarten van Steen},
year = {2017},
month = {02},
title = {Distributed Systems Third edition Preliminary version 3.01pre},
pages = {456-458},
isbn = {978-90-815406-2-9},
note = {NOTE:Book was previously published by: Pearson Education, Inc},
}

@BOOK{BOOK:BuildDepDistSyst,
author = {Wenbing Zhao},
publisher = {John Wiley \& Sons, Incorporated},
year = {2014},
month = {03},
title = {Building Dependable Distributed Systems},
pages = {239-284},
isbn = {9781118912706},
}

%websites
@ONLINE{WEB:UnderpBFT,
author = {Sheffield Nolan},
title = {pBFT — Understanding the Consensus Algorithm},
year = {2018},
month = {11},
url = {https://medium.com/coinmonks/pbft-understanding-the-algorithm-b7a7869650ae},
urldate = {2021-01-08}
}

@ONLINE{WEB:PBFTConSeries,
author = {\_kitchen},
title = {Consensus Series: PBFT},
year = {2019},
month = {11},
url = {https://medium.com/thundercore/consensus-series-pbft-3e011e7f3691},
urldate = {2021-01-08}
}

@ONLINE{WEB:PBFTGeeks,
author = {Parikshit Hooda},
title = {practical Byzantine Fault Tolerance(pBFT)},
year = {2019},
month = {12},
url = {https://www.geeksforgeeks.org/practical-byzantine-fault-tolerancepbft/},
urldate = {2021-01-12}
}

@ONLINE{WEB:ImpPBFTBlock,
author = {Kashish Khullar},
title = {Implementing PBFT in Blockchain},
year = {2019},
month = {08},
url = {https://medium.com/coinmonks/implementing-pbft-in-blockchain-12368c6c9548},
urldate = {2021-01-12}
}

%Videos
@ONLINE{VIDEO:YPBFT,
author = {Xangle},
title = {What is Practical Byzantine Fault Tolerance (pBFT)?},
year = {2018},
month = {10},
url = {https://www.youtube.com/watch?v=M4RW6GAwryc},
urldate = {2021-01-12},
note = {Youtube Video},
}

%slides
@unpublished{SLIDES:PBFT,
author = {H. {Dang} and Z. {Gao} and I. {Jahja} amd L. {Luu} and D. {Sivasankaran}},
title = {Practical Byzantine Fault Tolerance},
url = {https://www.comp.nus.edu.sg/~rahul/allfiles/cs6234-16-pbft.pdf},
year = {2016},
month = {03},
day = {30},
note = {Slide Presentation},
}

@ONLINE{DOC:Cleipnir,
author = {Thomas Stidsborg Sylvest},
title = {Cleipnir = Persistent Programming in .NET},
year = {2021},
url = {https://github.com/stidsborg/Cleipnir.PersistentProgramming},
urldate = {2021-03-21},
note = {NOTE:Github repository private for Stidsborg ask permission in order to get access.}
}

%Cleipnir/Corums
%update after meeting
@INPROCEEDINGS{PAPER:PaxosCleipnir, 
author = {Thomas Stidsborg Sylvest and Hein Meling and Leander Jehl},
title =  {Cleipnir - Framework Support for Fault-tolerant Distributed Systems},
institution = {University of Stavanger},
year = {2020},
month = {11},
pages = {1-18}
}

@INPROCEEDINGS{PAPER:EivindPaper,
author = {Eivind Bakkevig},
title = {Implementing a Distributed Key-Value Store Using Corums},
institution = {University of Stavanger},
year = {2020},
month = {06},
url = {https://hdl.handle.net/11250/2679782},
pages = {7-52}
}

@ONLINE{WEB:ASPNetCoreAPI,
author = {Rick Anderson and Kirk Larkin and Mike Wasson},
title = {Tutorial: Create a web API with ASP.NET Core},
year = {2021},
month = {04},
url = {https://docs.microsoft.com/en-us/aspnet/core/tutorials/first-web-api?view=aspnetcore-5.0&tabs=visual-studio},
urldate = {2021-03-14}
}

@ONLINE{WEB:Gorums,
author = {Hein Meling and John Ingve Olsen and Tormod Erevik Lea and Leander Jehl},
title = {Gorums},
year = {2021},
month = {04},
url = {https://github.com/relab/gorums},
urldate = {2021-03-14},
}

@ONLINE{WEB:DistSys,
author = {Techopedia Inc.},
title = {Distributed System},
year = {2021},
url = {https://www.techopedia.com/definition/18909/distributed-system},
urldate = {2021-03-18},
}

%articles
@article{ART:lamportByzGenProb,
author = {Lamport, Leslie and Shostak, Robert and Pease, Marshall},
title = {The Byzantine Generals Problem},
year = {1982},
issue_date = {July 1982},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {4},
number = {3},
issn = {0164-0925},
url = {https://doi.org/10.1145/357172.357176},
doi = {10.1145/357172.357176},
journal = {ACM Trans. Program. Lang. Syst.},
month = jul,
pages = {382–401},
numpages = {20}
}

@ONLINE{WEB:CleipnirScheduler,
author = {Mozilla and individual contributors},
title = {Concurrency model and the event loop},
year = {2021},
month = {03},
url = {https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop},
urldate = {2021-03-22},
}

@ONLINE{WEB:FIFO,
author = {Geeks for Geeks and Shivi\_Aggarwal and ukasp and29AjayKumar and Rajput-Ji},
title = {Program for FCFS CPU Scheduling Set 1},
year = {2021},
month = {02},
url = {https://www.geeksforgeeks.org/program-for-fcfs-cpu-scheduling-set-1/},
urldate = {2021-03-22}
}

@ONLINE{WEB:MSSQL,
author = {Microsoft},
title = {Ting du kommer til å like med SQL Server 2019},
year = {2021},
url = {https://www.microsoft.com/en-us/sql-server/sql-server-2019},
urldate = {2021-03-22}
}

@ONLINE{WEB:Enum,
author = {w3Schools},
title = {C\# Enum},
year = {2021},
url = {https://www.w3schools.com/cs/cs_enums.asp},
urldate = {2021-05-04}
}

@ONLINE{WEB:NewJSON,
author = {Newtonsoft},
title = {Json.NET Popular high-performance JSON framework for .NET},
year = {2021},
url = {https://www.newtonsoft.com/json},
urldate = {2021-05-05}
}

@ONLINE{WEB:golangmainpage,
author = {Google},
title = {Go},
year = {2021},
url = {https://golang.org/},
urldate = {2021-06-03}
}

@ONLINE{WEB:golangChannels,
author = {Google},
title = {Channels},
year = {2021},
url = {https://tour.golang.org/concurrency/2},
urldate = {2021-05-06}
}

@ONLINE{WEB:goto,
author = {BillWagner and MightyPen and mairaw and nxtn and nemrism and mjhoffman65 and mikeblome and guardrex and tompratt-AQ},
title = {goto (C\# Reference)},
year = {2015},
url = {https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/goto},
urldate = {2021-05-11}
}

@ONLINE{WEB:whenany,
title = {Task.WhenAny Method},
year = {2020},
url = {https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.whenany?view=net-5.0},
urldate = {2021-05-11}
}

@ONLINE{WEB:spoofingAttack,
auhtor = {MalwareBytes},
title = {What is a spoofing attack?},
year = {2021},
url = {https://www.malwarebytes.com/spoofing/},
urldate = {2021-05-24}
}

@ONLINE{WEB:tcp,
author = {Pamela Fox.},
title = {Transmission Control Protocol (TCP)},
year = {2020},
url = {https://www.khanacademy.org/computing/computers-and-internet/xcae6f4a7ff015e7d:the-internet/xcae6f4a7ff015e7d:transporting-packets/a/transmission-control-protocol--tcp},
urldate = {2021-06-08}
}